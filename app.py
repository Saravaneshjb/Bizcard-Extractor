import streamlit as st
from utils.utils_func import extract_details, read_data, update_data, delete_data, load_df_to_db
from utils.db_to_df import execute_query
from utils.data_load_sql_connector import Dataload


# Set page layout to wide
st.set_page_config(layout="wide")

# Title
st.title("Business Card Details Extractor")

## Adding side bar option 
option = st.sidebar.selectbox(
    "Choose an Option :",
    ("Extract and Display", 'Load to DB', "Read data from DB", "Update data in DB", "Delete data in DB")
)

# File uploader
uploaded_image = None
if option == 'Extract and Display':
    uploaded_image = st.file_uploader("Upload a business card image", type=["jpg", "png"])
    st.session_state.button_clicked = st.button("Extract details")
    if st.session_state.button_clicked:
        if uploaded_image is not None:
            st.image(uploaded_image, caption='Uploaded Image', use_column_width=True)
            df, df_T, details = extract_details(uploaded_image)
            # Display details
            if not df.empty:
                st.session_state.df = df
                st.subheader("Details extracted from the business card:")
                with st.expander("View Details"):
                    st.write(df_T)
            else:
                st.error("Failed to extract details from the image. Please try again with a different image.")
        else:
            st.error("Looks like the Image is not uploaded properly. Check and upload again")

elif option == 'Load to DB':
    if st.session_state.df is not None:
        # Loading the extracted data to DB
        st.subheader("Do you wish to load the details to DB?")
        selection = st.selectbox("Options", (" ", "No", "Yes"), key="load_data_selection", index=0)
        if selection == "Yes":
            st.info("Data load in Progress.....")
            load_df_to_db(st.session_state.df)
            st.success("Data loaded successfully")
        elif selection == "No":
            st.info("Okay let us know when you wish to load.")
        else:
            st.info("Choose an option")
    else:
        st.error("Please extract and display details from an image before loading to DB.")

elif option == "Read data from DB":
    if st.button("Read card_details table"):
        query_result=read_data()
        st.write(query_result)
elif option == "Update data in DB":
    st.write("Data available in the card_details table")
    query_result=read_data()
    st.write(query_result)
    #Starting the Update process
    selected_update_columns = st.multiselect("Select columns to perform update operation:", 
                                      ["Name", "Designation", "Organization_Name", "State", 
                                       "City", "Pincode", "Area", "Phone_number", "Email_ID", "Website"])
    selected_where_columns = st.multiselect("Select columns for the WHERE clause:", 
                                      ["Name", "Designation", "Organization_Name", "State", 
                                       "City", "Pincode", "Area", "Phone_number", "Email_ID", "Website"])
    if selected_update_columns:
        with st.form("Update_table"):
            input_update_data = {}
            input_where_data = {}
            for upd_column in selected_update_columns:
                input_update_data[upd_column] = st.text_input(f"Enter new value for {upd_column}:", key=f"{upd_column}_update")
            for whr_column in selected_where_columns:
                input_where_data[whr_column] = st.text_input(f"Enter value for {whr_column}:", key=f"{whr_column}_where")
            if st.form_submit_button("Update"):
                print("============The Update button is clicked==================")
                print("The update data dictionary : ",input_update_data)
                print("The where data dictionary :", input_where_data)
                if input_update_data:
                    print("Inside the if condition of the if input_update_data")
                    # Generate the Update Query 
                    update_query = "UPDATE card_details SET "
                    for column, value in input_update_data.items():
                        if column == "Pincode":
                            update_query += f"{column} = {value}, "
                        else:
                            update_query += f"{column} = '{value}', "
                    update_query = update_query.rstrip(", ")
                    print("Update query generated by providing just the update fields : ", update_query)
                if input_where_data:
                    # Include the where condition in the update query
                    print("Inside if condition for where clause")
                    for column, value in input_where_data.items():
                        if column == "Pincode":
                            update_query += f" WHERE {column} = {value} AND "
                        else:
                            update_query += f" WHERE {column} = '{value}' AND "
                    update_query = update_query.rstrip(" AND ")
                print("The Update query generated is:", update_query)
                dl_ob = Dataload()
                dl_ob.execute_update_query(update_query)
                # To display the Updated record from database 
                select_query = "SELECT * FROM card_details WHERE "
                conditions = []
                for column, value in input_update_data.items():
                    if column == "Pincode":
                        conditions.append(f"{column}={value}")
                    else:
                        conditions.append(f"{column}='{value}'")
                select_query += " AND ".join(conditions) + " "
                print("The select query generated is : ",select_query)
                query_result = dl_ob.execute_query(select_query)
                # Display the updated record
                st.write(query_result)
elif option == "Delete data in DB":
    #Display the data available in the table 
    st.write("Data available in the card_details table")
    query_result=read_data()
    st.write(query_result)
    #start the delete process
    selected_delete_columns = st.multiselect("Select columns to perform Delete Operation:", 
                                      ["Name", "Designation", "Organization_Name", "State", 
                                       "City", "Pincode", "Area", "Phone_number", "Email_ID", "Website"])
    if selected_delete_columns:
        with st.form("Delete_table"):
            input_del_data = {}
            for del_column in selected_delete_columns:
                input_del_data[del_column] = st.text_input(f"Enter new value for {del_column}:", key=f"{del_column}_delete")
            if st.form_submit_button("Delete"):
                # print("============The Update button is clicked==================")
                # print("The update data dictionary : ",input_update_data)
                # print("The where data dictionary :", input_where_data)
                if input_del_data:
                    print("Inside the if condition of the if input_del_data")
                    # Generate the Update Query 
                    delete_query = "DELETE FROM card_details where "
                    for column, value in input_del_data.items():
                        if column == "Pincode":
                            delete_query += f"{column} = {value} AND "
                        else:
                            delete_query += f"{column} = '{value}' AND "
                    delete_query = delete_query.rstrip(" AND ")
                    print("Delete query generated by providing delete : ", delete_query)
                print("The Update query generated is:", delete_query)
                dl_ob = Dataload()
                dl_ob.execute_update_query(delete_query)
                # To display the records in database after deletion
                select_query = "SELECT * FROM card_details"
                # conditions = []
                # for column, value in input_del_data.items():
                #     if column == "Pincode":
                #         conditions.append(f"{column}={value}")
                #     else:
                #         conditions.append(f"{column}='{value}'")
                # select_query += " AND ".join(conditions) + " "
                print("The select query generated is : ",select_query)
                query_result = dl_ob.execute_query(select_query)
                # Display the updated record
                st.write("Data in the card details table after deletion")
                st.write(query_result)
